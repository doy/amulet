/* automatically generated by rust-bindgen */

use libc::*;

// Manually generated from term.h
// TODO less manual would be appreciated
type TERMINAL = c_void;
#[link_args = "-lncursesw"]
extern {
    const cur_term: *TERMINAL;

    const boolnames: **c_char;
    const numnames: **c_char;
    const strnames: **c_char;
    const boolcodes: **c_char;

    fn setupterm(arg1: *c_char, arg2: c_int, arg3: *c_int) -> c_int;
    fn set_curterm(arg1: *TERMINAL) -> *TERMINAL;
    fn tparm(format: *c_char, arg1: c_long, arg2: c_long, arg3: c_long, arg4: c_long, arg5: c_long, arg6: c_long, arg7: c_long, arg8: c_long, arg9: c_long) -> *c_char;
}



// This is not necessarily true, but it's *probably* true.  Defined in wchar.h
// but missing from Rust's libc definitions.
type wint_t = c_uint;
const WEOF: c_uint = 0xffffffff;

type chtype = c_uint;
type mmask_t = c_ulong;
type NCURSES_BOOL = c_uchar;
type Struct_screen = c_void;
type SCREEN = Struct_screen;
type WINDOW = Struct__win_st;
type attr_t = chtype;
struct cchar_t {
    attr: attr_t,
    chars: [wchar_t]/5,
}
type Struct_ldat = c_void;
struct Struct__win_st {
    _cury: c_short,
    _curx: c_short,
    _maxy: c_short,
    _maxx: c_short,
    _begy: c_short,
    _begx: c_short,
    _flags: c_short,
    _attrs: attr_t,
    _bkgd: chtype,
    _notimeout: c_int,
    _clear: c_int,
    _leaveok: c_int,
    _scroll: c_int,
    _idlok: c_int,
    _idcok: c_int,
    _immed: c_int,
    _sync: c_int,
    _use_keypad: c_int,
    _delay: c_int,
    _line: *Struct_ldat,
    _regtop: c_short,
    _regbottom: c_short,
    _parx: c_int,
    _pary: c_int,
    _parent: *WINDOW,
    _pad: Struct_pdat,
    _yoffset: c_short,
    _bkgrnd: cchar_t,
}
struct Struct_pdat {
    _pad_y: c_short,
    _pad_x: c_short,
    _pad_top: c_short,
    _pad_left: c_short,
    _pad_bottom: c_short,
    _pad_right: c_short,
}
type NCURSES_OUTC = *u8;
type NCURSES_WINDOW_CB = *u8;
type NCURSES_SCREEN_CB = *u8;
struct MEVENT {
    id: c_short,
    x: c_int,
    y: c_int,
    z: c_int,
    bstate: mmask_t,
}
#[link_args = "-lncursesw"]
extern  {
    const acs_map: c_void;
    const curscr: *WINDOW;
    const newscr: *WINDOW;
    const stdscr: *WINDOW;
    const ttytype: c_void;
    const COLORS: c_int;
    const COLOR_PAIRS: c_int;
    const COLS: c_int;
    const ESCDELAY: c_int;
    const LINES: c_int;
    const TABSIZE: c_int;
    const _nc_wacs: *cchar_t;
    //wide: fn addch(++arg1: chtype) -> c_int;
    //wide: fn addchnstr(++arg1: *chtype, ++arg2: c_int) -> c_int;
    //wide: fn addchstr(++arg1: *chtype) -> c_int;
    //wide: fn addnstr(++arg1: *c_schar, ++arg2: c_int) -> c_int;
    //wide: fn addstr(++arg1: *c_schar) -> c_int;
    fn attroff(++arg1: c_int) -> c_int;
    fn attron(++arg1: c_int) -> c_int;
    fn attrset(++arg1: c_int) -> c_int;
    fn attr_get(++arg1: *attr_t, ++arg2: *c_short, ++arg3: *c_void) -> c_int;
    fn attr_off(++arg1: attr_t, ++arg2: *c_void) -> c_int;
    fn attr_on(++arg1: attr_t, ++arg2: *c_void) -> c_int;
    fn attr_set(++arg1: attr_t, ++arg2: c_short, ++arg3: *c_void) -> c_int;
    fn baudrate() -> c_int;
    fn beep() -> c_int;
    //wide: fn bkgd(++arg1: chtype) -> c_int;
    //wide: fn bkgdset(++arg1: chtype);
    //wide: fn border(++arg1: chtype, ++arg2: chtype, ++arg3: chtype, ++arg4: chtype, ++arg5: chtype, ++arg6: chtype, ++arg7: chtype, ++arg8: chtype) -> c_int;
    //wide: fn box(++arg1: *WINDOW, ++arg2: chtype, ++arg3: chtype) -> c_int;
    fn can_change_color() -> c_int;
    fn cbreak() -> c_int;
    fn chgat(++arg1: c_int, ++arg2: attr_t, ++arg3: c_short, ++arg4: *c_void) -> c_int;
    fn clear() -> c_int;
    fn clearok(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn clrtobot() -> c_int;
    fn clrtoeol() -> c_int;
    fn color_content(++arg1: c_short, ++arg2: *c_short, ++arg3: *c_short, ++arg4: *c_short) -> c_int;
    fn color_set(++arg1: c_short, ++arg2: *c_void) -> c_int;
    fn COLOR_PAIR(++arg1: c_int) -> c_int;
    fn copywin(++arg1: *WINDOW, ++arg2: *WINDOW, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int, ++arg6: c_int, ++arg7: c_int, ++arg8: c_int, ++arg9: c_int) -> c_int;
    fn curs_set(++arg1: c_int) -> c_int;
    fn def_prog_mode() -> c_int;
    fn def_shell_mode() -> c_int;
    fn delay_output(++arg1: c_int) -> c_int;
    fn delch() -> c_int;
    fn delscreen(++arg1: *SCREEN);
    fn delwin(++arg1: *WINDOW) -> c_int;
    fn deleteln() -> c_int;
    fn derwin(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int) -> *WINDOW;
    fn doupdate() -> c_int;
    fn dupwin(++arg1: *WINDOW) -> *WINDOW;
    fn echo() -> c_int;
    //wide: fn echochar(++arg1: chtype) -> c_int;
    fn erase() -> c_int;
    fn endwin() -> c_int;
    //wide: fn erasechar() -> c_schar;
    fn filter();
    fn flash() -> c_int;
    fn flushinp() -> c_int;
    //wide: fn getbkgd(++arg1: *WINDOW) -> chtype;
    //wide: fn getch() -> c_int;
    //wide: fn getnstr(++arg1: *c_schar, ++arg2: c_int) -> c_int;
    //wide: fn getstr(++arg1: *c_schar) -> c_int;
    fn getwin(++arg1: *FILE) -> *WINDOW;
    fn halfdelay(++arg1: c_int) -> c_int;
    fn has_colors() -> c_int;
    fn has_ic() -> c_int;
    fn has_il() -> c_int;
    //wide: fn hline(++arg1: chtype, ++arg2: c_int) -> c_int;
    fn idcok(++arg1: *WINDOW, ++arg2: c_int);
    fn idlok(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn immedok(++arg1: *WINDOW, ++arg2: c_int);
    //wide: fn inch() -> chtype;
    //wide: fn inchnstr(++arg1: *chtype, ++arg2: c_int) -> c_int;
    //wide: fn inchstr(++arg1: *chtype) -> c_int;
    fn initscr() -> *WINDOW;
    fn init_color(++arg1: c_short, ++arg2: c_short, ++arg3: c_short, ++arg4: c_short) -> c_int;
    fn init_pair(++arg1: c_short, ++arg2: c_short, ++arg3: c_short) -> c_int;
    //wide: fn innstr(++arg1: *c_schar, ++arg2: c_int) -> c_int;
    //wide: fn insch(++arg1: chtype) -> c_int;
    fn insdelln(++arg1: c_int) -> c_int;
    fn insertln() -> c_int;
    //wide: fn insnstr(++arg1: *c_schar, ++arg2: c_int) -> c_int;
    //wide: fn insstr(++arg1: *c_schar) -> c_int;
    //wide: fn instr(++arg1: *c_schar) -> c_int;
    fn intrflush(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn isendwin() -> c_int;
    fn is_linetouched(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn is_wintouched(++arg1: *WINDOW) -> c_int;
    //wide: fn keyname(++arg1: c_int) -> *c_schar;
    fn keypad(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    //wide: fn killchar() -> c_schar;
    fn leaveok(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn longname() -> *c_schar;
    fn meta(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    //wide: fn mvaddch(++arg1: c_int, ++arg2: c_int, ++arg3: chtype) -> c_int;
    //wide: fn mvaddchnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *chtype, ++arg4: c_int) -> c_int;
    //wide: fn mvaddchstr(++arg1: c_int, ++arg2: c_int, ++arg3: *chtype) -> c_int;
    //wide: fn mvaddnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_schar, ++arg4: c_int) -> c_int;
    //wide: fn mvaddstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_schar) -> c_int;
    fn mvchgat(++arg1: c_int, ++arg2: c_int, ++arg3: c_int, ++arg4: attr_t, ++arg5: c_short, ++arg6: *c_void) -> c_int;
    fn mvcur(++arg1: c_int, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int) -> c_int;
    fn mvdelch(++arg1: c_int, ++arg2: c_int) -> c_int;
    fn mvderwin(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;
    //wide: fn mvgetch(++arg1: c_int, ++arg2: c_int) -> c_int;
    //wide: fn mvgetnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_schar, ++arg4: c_int) -> c_int;
    //wide: fn mvgetstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_schar) -> c_int;
    //wide: fn mvhline(++arg1: c_int, ++arg2: c_int, ++arg3: chtype, ++arg4: c_int) -> c_int;
    //wide: fn mvinch(++arg1: c_int, ++arg2: c_int) -> chtype;
    //wide: fn mvinchnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *chtype, ++arg4: c_int) -> c_int;
    //wide: fn mvinchstr(++arg1: c_int, ++arg2: c_int, ++arg3: *chtype) -> c_int;
    //wide: fn mvinnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_schar, ++arg4: c_int) -> c_int;
    //wide: fn mvinsch(++arg1: c_int, ++arg2: c_int, ++arg3: chtype) -> c_int;
    //wide: fn mvinsnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_schar, ++arg4: c_int) -> c_int;
    //wide: fn mvinsstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_schar) -> c_int;
    //wide: fn mvinstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_schar) -> c_int;
    fn mvprintw(++arg1: c_int, ++arg2: c_int, ++arg3: *c_schar) -> c_int;
    fn mvscanw(++arg1: c_int, ++arg2: c_int, ++arg3: *c_schar) -> c_int;
    //wide: fn mvvline(++arg1: c_int, ++arg2: c_int, ++arg3: chtype, ++arg4: c_int) -> c_int;
    //wide: fn mvwaddch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: chtype) -> c_int;
    //wide: fn mvwaddchnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *chtype, ++arg5: c_int) -> c_int;
    //wide: fn mvwaddchstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *chtype) -> c_int;
    //wide: fn mvwaddnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_schar, ++arg5: c_int) -> c_int;
    //wide: fn mvwaddstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_schar) -> c_int;
    fn mvwchgat(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: attr_t, ++arg6: c_short, ++arg7: *c_void) -> c_int;
    fn mvwdelch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;
    //wide: fn mvwgetch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;
    //wide: fn mvwgetnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_schar, ++arg5: c_int) -> c_int;
    //wide: fn mvwgetstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_schar) -> c_int;
    //wide: fn mvwhline(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: chtype, ++arg5: c_int) -> c_int;
    //wide: fn mvwin(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;
    //wide: fn mvwinch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> chtype;
    //wide: fn mvwinchnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *chtype, ++arg5: c_int) -> c_int;
    //wide: fn mvwinchstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *chtype) -> c_int;
    //wide: fn mvwinnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_schar, ++arg5: c_int) -> c_int;
    //wide: fn mvwinsch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: chtype) -> c_int;
    //wide: fn mvwinsnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_schar, ++arg5: c_int) -> c_int;
    //wide: fn mvwinsstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_schar) -> c_int;
    //wide: fn mvwinstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_schar) -> c_int;
    fn mvwprintw(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_schar) -> c_int;
    fn mvwscanw(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_schar) -> c_int;
    //wide: fn mvwvline(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: chtype, ++arg5: c_int) -> c_int;
    fn napms(++arg1: c_int) -> c_int;
    fn newpad(++arg1: c_int, ++arg2: c_int) -> *WINDOW;
    fn newterm(++arg1: *c_schar, ++arg2: *FILE, ++arg3: *FILE) -> *SCREEN;
    fn newwin(++arg1: c_int, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int) -> *WINDOW;
    fn nl() -> c_int;
    fn nocbreak() -> c_int;
    fn nodelay(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn noecho() -> c_int;
    fn nonl() -> c_int;
    fn noqiflush();
    fn noraw() -> c_int;
    fn notimeout(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn overlay(++arg1: *WINDOW, ++arg2: *WINDOW) -> c_int;
    fn overwrite(++arg1: *WINDOW, ++arg2: *WINDOW) -> c_int;
    fn pair_content(++arg1: c_short, ++arg2: *c_short, ++arg3: *c_short) -> c_int;
    fn PAIR_NUMBER(++arg1: c_int) -> c_int;
    //wide: fn pechochar(++arg1: *WINDOW, ++arg2: chtype) -> c_int;
    fn pnoutrefresh(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int, ++arg6: c_int, ++arg7: c_int) -> c_int;
    fn prefresh(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int, ++arg6: c_int, ++arg7: c_int) -> c_int;
    fn printw(++arg1: *c_schar) -> c_int;
    fn putwin(++arg1: *WINDOW, ++arg2: *FILE) -> c_int;
    fn qiflush();
    fn raw() -> c_int;
    fn redrawwin(++arg1: *WINDOW) -> c_int;
    fn refresh() -> c_int;
    fn resetty() -> c_int;
    fn reset_prog_mode() -> c_int;
    fn reset_shell_mode() -> c_int;
    fn ripoffline(++arg1: c_int, ++arg2: *u8) -> c_int;
    fn savetty() -> c_int;
    fn scanw(++arg1: *c_schar) -> c_int;
    fn scr_dump(++arg1: *c_schar) -> c_int;
    fn scr_init(++arg1: *c_schar) -> c_int;
    fn scrl(++arg1: c_int) -> c_int;
    fn scroll(++arg1: *WINDOW) -> c_int;
    fn scrollok(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn scr_restore(++arg1: *c_schar) -> c_int;
    fn scr_set(++arg1: *c_schar) -> c_int;
    fn setscrreg(++arg1: c_int, ++arg2: c_int) -> c_int;
    fn set_term(++arg1: *SCREEN) -> *SCREEN;
    fn slk_attroff(++arg1: chtype) -> c_int;
    fn slk_attr_off(++arg1: attr_t, ++arg2: *c_void) -> c_int;
    fn slk_attron(++arg1: chtype) -> c_int;
    fn slk_attr_on(++arg1: attr_t, ++arg2: *c_void) -> c_int;
    fn slk_attrset(++arg1: chtype) -> c_int;
    fn slk_attr() -> attr_t;
    fn slk_attr_set(++arg1: attr_t, ++arg2: c_short, ++arg3: *c_void) -> c_int;
    fn slk_clear() -> c_int;
    fn slk_color(++arg1: c_short) -> c_int;
    fn slk_init(++arg1: c_int) -> c_int;
    fn slk_label(++arg1: c_int) -> *c_schar;
    fn slk_noutrefresh() -> c_int;
    fn slk_refresh() -> c_int;
    fn slk_restore() -> c_int;
    //wide: fn slk_set(++arg1: c_int, ++arg2: *c_schar, ++arg3: c_int) -> c_int;
    fn slk_touch() -> c_int;
    fn standout() -> c_int;
    fn standend() -> c_int;
    fn start_color() -> c_int;
    fn subpad(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int) -> *WINDOW;
    fn subwin(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int) -> *WINDOW;
    fn syncok(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    //wide: fn termattrs() -> chtype;
    fn termname() -> *c_schar;
    fn timeout(++arg1: c_int);
    fn touchline(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;
    fn touchwin(++arg1: *WINDOW) -> c_int;
    fn typeahead(++arg1: c_int) -> c_int;
    //wide: fn ungetch(++arg1: c_int) -> c_int;
    fn untouchwin(++arg1: *WINDOW) -> c_int;
    fn use_env(++arg1: c_int);
    //wide: fn vidattr(++arg1: chtype) -> c_int;
    //wide: fn vidputs(++arg1: chtype, ++arg2: NCURSES_OUTC) -> c_int;
    //wide: fn vline(++arg1: chtype, ++arg2: c_int) -> c_int;
    // varargs aren't supported by Rust, but these are covered by the fmt!
    // macro anyway
    /*
    fn vwprintw(++arg1: *WINDOW, ++arg2: *c_schar, ++arg3: *__va_list_tag) -> c_int;
    fn vw_printw(++arg1: *WINDOW, ++arg2: *c_schar, ++arg3: *__va_list_tag) -> c_int;
    fn vwscanw(++arg1: *WINDOW, ++arg2: *c_schar, ++arg3: *__va_list_tag) -> c_int;
    fn vw_scanw(++arg1: *WINDOW, ++arg2: *c_schar, ++arg3: *__va_list_tag) -> c_int;
    */
    //wide: fn waddch(++arg1: *WINDOW, ++arg2: chtype) -> c_int;
    //wide: fn waddchnstr(++arg1: *WINDOW, ++arg2: *chtype, ++arg3: c_int) -> c_int;
    //wide: fn waddchstr(++arg1: *WINDOW, ++arg2: *chtype) -> c_int;
    //wide: fn waddnstr(++arg1: *WINDOW, ++arg2: *c_schar, ++arg3: c_int) -> c_int;
    //wide: fn waddstr(++arg1: *WINDOW, ++arg2: *c_schar) -> c_int;
    fn wattron(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn wattroff(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn wattrset(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn wattr_get(++arg1: *WINDOW, ++arg2: *attr_t, ++arg3: *c_short, ++arg4: *c_void) -> c_int;
    fn wattr_on(++arg1: *WINDOW, ++arg2: attr_t, ++arg3: *c_void) -> c_int;
    fn wattr_off(++arg1: *WINDOW, ++arg2: attr_t, ++arg3: *c_void) -> c_int;
    fn wattr_set(++arg1: *WINDOW, ++arg2: attr_t, ++arg3: c_short, ++arg4: *c_void) -> c_int;
    //wide: fn wbkgd(++arg1: *WINDOW, ++arg2: chtype) -> c_int;
    //wide: fn wbkgdset(++arg1: *WINDOW, ++arg2: chtype);
    //wide: fn wborder(++arg1: *WINDOW, ++arg2: chtype, ++arg3: chtype, ++arg4: chtype, ++arg5: chtype, ++arg6: chtype, ++arg7: chtype, ++arg8: chtype, ++arg9: chtype) -> c_int;
    fn wchgat(++arg1: *WINDOW, ++arg2: c_int, ++arg3: attr_t, ++arg4: c_short, ++arg5: *c_void) -> c_int;
    fn wclear(++arg1: *WINDOW) -> c_int;
    fn wclrtobot(++arg1: *WINDOW) -> c_int;
    fn wclrtoeol(++arg1: *WINDOW) -> c_int;
    fn wcolor_set(++arg1: *WINDOW, ++arg2: c_short, ++arg3: *c_void) -> c_int;
    fn wcursyncup(++arg1: *WINDOW);
    fn wdelch(++arg1: *WINDOW) -> c_int;
    fn wdeleteln(++arg1: *WINDOW) -> c_int;
    //wide: fn wechochar(++arg1: *WINDOW, ++arg2: chtype) -> c_int;
    fn werase(++arg1: *WINDOW) -> c_int;
    //wide: fn wgetch(++arg1: *WINDOW) -> c_int;
    //wide: fn wgetnstr(++arg1: *WINDOW, ++arg2: *c_schar, ++arg3: c_int) -> c_int;
    //wide: fn wgetstr(++arg1: *WINDOW, ++arg2: *c_schar) -> c_int;
    //wide: fn whline(++arg1: *WINDOW, ++arg2: chtype, ++arg3: c_int) -> c_int;
    //wide: fn winch(++arg1: *WINDOW) -> chtype;
    //wide: fn winchnstr(++arg1: *WINDOW, ++arg2: *chtype, ++arg3: c_int) -> c_int;
    //wide: fn winchstr(++arg1: *WINDOW, ++arg2: *chtype) -> c_int;
    //wide: fn winnstr(++arg1: *WINDOW, ++arg2: *c_schar, ++arg3: c_int) -> c_int;
    //wide: fn winsch(++arg1: *WINDOW, ++arg2: chtype) -> c_int;
    fn winsdelln(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn winsertln(++arg1: *WINDOW) -> c_int;
    //wide: fn winsnstr(++arg1: *WINDOW, ++arg2: *c_schar, ++arg3: c_int) -> c_int;
    //wide: fn winsstr(++arg1: *WINDOW, ++arg2: *c_schar) -> c_int;
    //wide: fn winstr(++arg1: *WINDOW, ++arg2: *c_schar) -> c_int;
    fn wmove(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;
    fn wnoutrefresh(++arg1: *WINDOW) -> c_int;
    fn wprintw(++arg1: *WINDOW, ++arg2: *c_schar) -> c_int;
    fn wredrawln(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;
    fn wrefresh(++arg1: *WINDOW) -> c_int;
    fn wscanw(++arg1: *WINDOW, ++arg2: *c_schar) -> c_int;
    fn wscrl(++arg1: *WINDOW, ++arg2: c_int) -> c_int;
    fn wsetscrreg(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;
    fn wstandout(++arg1: *WINDOW) -> c_int;
    fn wstandend(++arg1: *WINDOW) -> c_int;
    fn wsyncdown(++arg1: *WINDOW);
    fn wsyncup(++arg1: *WINDOW);
    fn wtimeout(++arg1: *WINDOW, ++arg2: c_int);
    fn wtouchln(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int) -> c_int;
    //wide: fn wvline(++arg1: *WINDOW, ++arg2: chtype, ++arg3: c_int) -> c_int;
    fn tigetflag(++arg1: *c_schar) -> c_int;
    fn tigetnum(++arg1: *c_schar) -> c_int;
    fn tigetstr(++arg1: *c_schar) -> *c_schar;
    fn putp(++arg1: *c_schar) -> c_int;
    //fn tparm(++arg1: *c_schar, ++arg2: c_int, ++arg3: c_int) -> *c_schar;
    fn tiparm(++arg1: *c_schar) -> *c_schar;
    fn getattrs(++arg1: *WINDOW) -> c_int;
    fn getcurx(++arg1: *WINDOW) -> c_int;
    fn getcury(++arg1: *WINDOW) -> c_int;
    fn getbegx(++arg1: *WINDOW) -> c_int;
    fn getbegy(++arg1: *WINDOW) -> c_int;
    fn getmaxx(++arg1: *WINDOW) -> c_int;
    fn getmaxy(++arg1: *WINDOW) -> c_int;
    fn getparx(++arg1: *WINDOW) -> c_int;
    fn getpary(++arg1: *WINDOW) -> c_int;
    fn is_term_resized(++arg1: c_int, ++arg2: c_int) -> c_int;
    fn keybound(++arg1: c_int, ++arg2: c_int) -> *c_schar;
    fn curses_version() -> *c_schar;
    fn assume_default_colors(++arg1: c_int, ++arg2: c_int) -> c_int;
    fn define_key(++arg1: *c_schar, ++arg2: c_int) -> c_int;
    fn get_escdelay() -> c_int;
    fn key_defined(++arg1: *c_schar) -> c_int;
    fn keyok(++arg1: c_int, ++arg2: c_int) -> c_int;
    fn resize_term(++arg1: c_int, ++arg2: c_int) -> c_int;
    fn resizeterm(++arg1: c_int, ++arg2: c_int) -> c_int;
    fn set_escdelay(++arg1: c_int) -> c_int;
    fn set_tabsize(++arg1: c_int) -> c_int;
    fn use_default_colors() -> c_int;
    fn use_extended_names(++arg1: c_int) -> c_int;
    fn use_legacy_coding(++arg1: c_int) -> c_int;
    fn use_screen(++arg1: *SCREEN, ++arg2: NCURSES_SCREEN_CB, ++arg3: *c_void) -> c_int;
    fn use_window(++arg1: *WINDOW, ++arg2: NCURSES_WINDOW_CB, ++arg3: *c_void) -> c_int;
    fn wresize(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;
    fn nofilter();
    fn wgetparent(++arg1: *WINDOW) -> *WINDOW;
    fn is_cleared(++arg1: *WINDOW) -> c_int;
    fn is_idcok(++arg1: *WINDOW) -> c_int;
    fn is_idlok(++arg1: *WINDOW) -> c_int;
    fn is_immedok(++arg1: *WINDOW) -> c_int;
    fn is_keypad(++arg1: *WINDOW) -> c_int;
    fn is_leaveok(++arg1: *WINDOW) -> c_int;
    fn is_nodelay(++arg1: *WINDOW) -> c_int;
    fn is_notimeout(++arg1: *WINDOW) -> c_int;
    fn is_pad(++arg1: *WINDOW) -> c_int;
    fn is_scrollok(++arg1: *WINDOW) -> c_int;
    fn is_subwin(++arg1: *WINDOW) -> c_int;
    fn is_syncok(++arg1: *WINDOW) -> c_int;
    fn wgetscrreg(++arg1: *WINDOW, ++arg2: *c_int, ++arg3: *c_int) -> c_int;
    fn has_mouse() -> c_int;
    fn getmouse(++arg1: *MEVENT) -> c_int;
    fn ungetmouse(++arg1: *MEVENT) -> c_int;
    fn mousemask(++arg1: mmask_t, ++arg2: *mmask_t) -> mmask_t;
    fn wenclose(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;
    fn mouseinterval(++arg1: c_int) -> c_int;
    fn wmouse_trafo(++arg1: *WINDOW, ++arg2: *c_int, ++arg3: *c_int, ++arg4: c_int) -> c_int;
    fn mouse_trafo(++arg1: *c_int, ++arg2: *c_int, ++arg3: c_int) -> c_int;
    fn mcprint(++arg1: *c_schar, ++arg2: c_int) -> c_int;
    fn has_key(++arg1: c_int) -> c_int;

    // Debug only
    /*
    fn _move(++arg1: c_int, ++arg2: c_int) -> c_int;
    fn _tracef(++arg1: *c_schar);
    fn _tracedump(++arg1: *c_schar, ++arg2: *WINDOW);
    fn _traceattr(++arg1: attr_t) -> *c_schar;
    fn _traceattr2(++arg1: c_int, ++arg2: chtype) -> *c_schar;
    fn _nc_tracebits() -> *c_schar;
    fn _tracechar(++arg1: c_int) -> *c_schar;
    fn _tracechtype(++arg1: chtype) -> *c_schar;
    fn _tracechtype2(++arg1: c_int, ++arg2: chtype) -> *c_schar;
    fn _tracemouse(++arg1: *MEVENT) -> *c_schar;
    fn trace(++arg1: c_uint);
    */

    // Wide-character functions, only available in ncursesw.
    // Each of these obsoletes something above, marked with a '//wide:'
    fn add_wch(++arg1: *cchar_t) -> c_int;
    fn add_wchnstr(++arg1: *cchar_t, ++arg2: c_int) -> c_int;
    fn add_wchstr(++arg1: *cchar_t) -> c_int;
    fn addnwstr(++arg1: *wchar_t, ++arg2: c_int) -> c_int;
    fn addwstr(++arg1: *wchar_t) -> c_int;
    fn bkgrnd(++arg1: *cchar_t) -> c_int;
    fn bkgrndset(++arg1: *cchar_t);
    fn border_set(++arg1: *cchar_t, ++arg2: *cchar_t, ++arg3: *cchar_t, ++arg4: *cchar_t, ++arg5: *cchar_t, ++arg6: *cchar_t, ++arg7: *cchar_t, ++arg8: *cchar_t) -> c_int;
    fn box_set(++arg1: *WINDOW, ++arg2: *cchar_t, ++arg3: *cchar_t) -> c_int;
    fn echo_wchar(++arg1: *cchar_t) -> c_int;
    fn erasewchar(++arg1: *wchar_t) -> c_int;
    fn get_wch(++arg1: *wint_t) -> c_int;
    fn get_wstr(++arg1: *wint_t) -> c_int;
    fn getbkgrnd(++arg1: *cchar_t) -> c_int;
    fn getcchar(++arg1: *cchar_t, ++arg2: *wchar_t, ++arg3: *attr_t, ++arg4: *c_short, ++arg5: *c_void) -> c_int;
    fn getn_wstr(++arg1: *wint_t, ++arg2: c_int) -> c_int;
    fn hline_set(++arg1: *cchar_t, ++arg2: c_int) -> c_int;
    fn in_wch(++arg1: *cchar_t) -> c_int;
    fn in_wchnstr(++arg1: *cchar_t, ++arg2: c_int) -> c_int;
    fn in_wchstr(++arg1: *cchar_t) -> c_int;
    fn innwstr(++arg1: *wchar_t, ++arg2: c_int) -> c_int;
    fn ins_nwstr(++arg1: *wchar_t, ++arg2: c_int) -> c_int;
    fn ins_wch(++arg1: *cchar_t) -> c_int;
    fn ins_wstr(++arg1: *wchar_t) -> c_int;
    fn inwstr(++arg1: *wchar_t) -> c_int;
    fn key_name(++arg1: wchar_t) -> *c_schar;
    fn killwchar(++arg1: *wchar_t) -> c_int;
    fn mvadd_wch(++arg1: c_int, ++arg2: c_int, ++arg3: *cchar_t) -> c_int;
    fn mvadd_wchnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *cchar_t, ++arg4: c_int) -> c_int;
    fn mvadd_wchstr(++arg1: c_int, ++arg2: c_int, ++arg3: *cchar_t) -> c_int;
    fn mvaddnwstr(++arg1: c_int, ++arg2: c_int, ++arg3: *wchar_t, ++arg4: c_int) -> c_int;
    fn mvaddwstr(++arg1: c_int, ++arg2: c_int, ++arg3: *wchar_t) -> c_int;
    fn mvget_wch(++arg1: c_int, ++arg2: c_int, ++arg3: *wint_t) -> c_int;
    fn mvget_wstr(++arg1: c_int, ++arg2: c_int, ++arg3: *wint_t) -> c_int;
    fn mvgetn_wstr(++arg1: c_int, ++arg2: c_int, ++arg3: *wint_t, ++arg4: c_int) -> c_int;
    fn mvhline_set(++arg1: c_int, ++arg2: c_int, ++arg3: *cchar_t, ++arg4: c_int) -> c_int;
    fn mvin_wch(++arg1: c_int, ++arg2: c_int, ++arg3: *cchar_t) -> c_int;
    fn mvin_wchnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *cchar_t, ++arg4: c_int) -> c_int;
    fn mvin_wchstr(++arg1: c_int, ++arg2: c_int, ++arg3: *cchar_t) -> c_int;
    fn mvinnwstr(++arg1: c_int, ++arg2: c_int, ++arg3: *wchar_t, ++arg4: c_int) -> c_int;
    fn mvins_nwstr(++arg1: c_int, ++arg2: c_int, ++arg3: *wchar_t, ++arg4: c_int) -> c_int;
    fn mvins_wch(++arg1: c_int, ++arg2: c_int, ++arg3: *cchar_t) -> c_int;
    fn mvins_wstr(++arg1: c_int, ++arg2: c_int, ++arg3: *wchar_t) -> c_int;
    fn mvinwstr(++arg1: c_int, ++arg2: c_int, ++arg3: *wchar_t) -> c_int;
    fn mvvline_set(++arg1: c_int, ++arg2: c_int, ++arg3: *cchar_t, ++arg4: c_int) -> c_int;
    fn mvwadd_wch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *cchar_t) -> c_int;
    fn mvwadd_wchnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *cchar_t, ++arg5: c_int) -> c_int;
    fn mvwadd_wchstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *cchar_t) -> c_int;
    fn mvwaddnwstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *wchar_t, ++arg5: c_int) -> c_int;
    fn mvwaddwstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *wchar_t) -> c_int;
    fn mvwget_wch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *wint_t) -> c_int;
    fn mvwget_wstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *wint_t) -> c_int;
    fn mvwgetn_wstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *wint_t, ++arg5: c_int) -> c_int;
    fn mvwhline_set(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *cchar_t, ++arg5: c_int) -> c_int;
    fn mvwin_wch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *cchar_t) -> c_int;
    fn mvwin_wchnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *cchar_t, ++arg5: c_int) -> c_int;
    fn mvwin_wchstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *cchar_t) -> c_int;
    fn mvwinnwstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *wchar_t, ++arg5: c_int) -> c_int;
    fn mvwins_nwstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *wchar_t, ++arg5: c_int) -> c_int;
    fn mvwins_wch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *cchar_t) -> c_int;
    fn mvwins_wstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *wchar_t) -> c_int;
    fn mvwinwstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *wchar_t) -> c_int;
    fn mvwvline_set(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *cchar_t, ++arg5: c_int) -> c_int;
    fn pecho_wchar(++arg1: *WINDOW, ++arg2: *cchar_t) -> c_int;
    fn setcchar(++arg1: *cchar_t, ++arg2: *wchar_t, ++arg3: attr_t, ++arg4: c_short, ++arg5: *c_void) -> c_int;
    fn slk_wset(++arg1: c_int, ++arg2: *wchar_t, ++arg3: c_int) -> c_int;
    fn term_attrs() -> attr_t;
    fn unget_wch(++arg1: wchar_t) -> c_int;
    fn vid_attr(++arg1: attr_t, ++arg2: c_short, ++arg3: *c_void) -> c_int;
    fn vid_puts(++arg1: attr_t, ++arg2: c_short, ++arg3: *c_void, ++arg4: NCURSES_OUTC) -> c_int;
    fn vline_set(++arg1: *cchar_t, ++arg2: c_int) -> c_int;
    fn wadd_wch(++arg1: *WINDOW, ++arg2: *cchar_t) -> c_int;
    fn wadd_wchnstr(++arg1: *WINDOW, ++arg2: *cchar_t, ++arg3: c_int) -> c_int;
    fn wadd_wchstr(++arg1: *WINDOW, ++arg2: *cchar_t) -> c_int;
    fn waddnwstr(++arg1: *WINDOW, ++arg2: *wchar_t, ++arg3: c_int) -> c_int;
    fn waddwstr(++arg1: *WINDOW, ++arg2: *wchar_t) -> c_int;
    fn wbkgrnd(++arg1: *WINDOW, ++arg2: *cchar_t) -> c_int;
    fn wbkgrndset(++arg1: *WINDOW, ++arg2: *cchar_t);
    fn wborder_set(++arg1: *WINDOW, ++arg2: *cchar_t, ++arg3: *cchar_t, ++arg4: *cchar_t, ++arg5: *cchar_t, ++arg6: *cchar_t, ++arg7: *cchar_t, ++arg8: *cchar_t, ++arg9: *cchar_t) -> c_int;
    fn wecho_wchar(++arg1: *WINDOW, ++arg2: *cchar_t) -> c_int;
    fn wget_wch(++arg1: *WINDOW, ++arg2: *wint_t) -> c_int;
    fn wget_wstr(++arg1: *WINDOW, ++arg2: *wint_t) -> c_int;
    fn wgetbkgrnd(++arg1: *WINDOW, ++arg2: *cchar_t) -> c_int;
    fn wgetn_wstr(++arg1: *WINDOW, ++arg2: *wint_t, ++arg3: c_int) -> c_int;
    fn whline_set(++arg1: *WINDOW, ++arg2: *cchar_t, ++arg3: c_int) -> c_int;
    fn win_wch(++arg1: *WINDOW, ++arg2: *cchar_t) -> c_int;
    fn win_wchnstr(++arg1: *WINDOW, ++arg2: *cchar_t, ++arg3: c_int) -> c_int;
    fn win_wchstr(++arg1: *WINDOW, ++arg2: *cchar_t) -> c_int;
    fn winnwstr(++arg1: *WINDOW, ++arg2: *wchar_t, ++arg3: c_int) -> c_int;
    fn wins_nwstr(++arg1: *WINDOW, ++arg2: *wchar_t, ++arg3: c_int) -> c_int;
    fn wins_wch(++arg1: *WINDOW, ++arg2: *cchar_t) -> c_int;
    fn wins_wstr(++arg1: *WINDOW, ++arg2: *wchar_t) -> c_int;
    fn winwstr(++arg1: *WINDOW, ++arg2: *wchar_t) -> c_int;
    fn wunctrl(++arg1: *cchar_t) -> *wchar_t;
    fn wvline_set(++arg1: *WINDOW, ++arg2: *cchar_t, ++arg3: c_int) -> c_int;
}


////////////////////////////////////////////////////////////////////////////////
// Manually-ported preprocessor stuff

const COLOR_BLACK:      c_short = 0;
const COLOR_RED:        c_short = 1;
const COLOR_GREEN:      c_short = 2;
const COLOR_YELLOW:     c_short = 3;
const COLOR_BLUE:       c_short = 4;
const COLOR_MAGENTA:    c_short = 5;
const COLOR_CYAN:       c_short = 6;
const COLOR_WHITE:      c_short = 7;

const NCURSES_ATTR_SHIFT: c_int = 8;
const A_NORMAL: c_int = 0;
//#define A_ATTRIBUTES NCURSES_BITS(~(1U - 1U),0)
//#define A_CHARTEXT   (NCURSES_BITS(1U,0) - 1U)
const A_COLOR:      c_int = ((1 << 8) - 1) << (NCURSES_ATTR_SHIFT);
const A_STANDOUT:   c_int = 1 << (NCURSES_ATTR_SHIFT + 8);
const A_UNDERLINE:  c_int = 1 << (NCURSES_ATTR_SHIFT + 9);
const A_REVERSE:    c_int = 1 << (NCURSES_ATTR_SHIFT + 10);
const A_BLINK:      c_int = 1 << (NCURSES_ATTR_SHIFT + 11);
const A_DIM:        c_int = 1 << (NCURSES_ATTR_SHIFT + 12);
const A_BOLD:       c_int = 1 << (NCURSES_ATTR_SHIFT + 13);

const KEY_DOWN:     wint_t = 258;
const KEY_UP:       wint_t = 259;
const KEY_LEFT:     wint_t = 260;
const KEY_RIGHT:    wint_t = 261;

const KEY_F0:       wint_t = 264;

fn KEY_F(n: wint_t) -> wint_t {
    return KEY_F0 + n;
}


// Return values
const ERR: c_int = -1;
const OK: c_int = 0;

const KEY_CODE_YES: c_int = 256;

