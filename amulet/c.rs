/* automatically generated by rust-bindgen */

import libc::*;

type chtype = c_uint;

type mmask_t = c_ulong;

type NCURSES_BOOL = c_uchar;

/* FIXME: global variable acs_map */

type struct_screen = c_void;

type SCREEN = struct_screen;

type WINDOW = struct__win_st;

type attr_t = chtype;

type struct_ldat = c_void;

enum _parent_window {
    WINDOW
}

type struct__win_st = {
    _cury: c_short,
    _curx: c_short,
    _maxy: c_short,
    _maxx: c_short,
    _begy: c_short,
    _begx: c_short,
    _flags: c_short,
    _attrs: attr_t,
    _bkgd: chtype,
    _notimeout: bool,
    _clear: bool,
    _leaveok: bool,
    _scroll: bool,
    _idlok: bool,
    _idcok: bool,
    _immed: bool,
    _sync: bool,
    _use_keypad: bool,
    _delay: c_int,
    _line: *c_void /* struct_ldat */,
    _regtop: c_short,
    _regbottom: c_short,
    _parx: c_int,
    _pary: c_int,
    _parent: *_parent_window,
    _pad: struct_pdat,
    _yoffset: c_short,
};

type struct_pdat = {
    _pad_y: c_short,
    _pad_x: c_short,
    _pad_top: c_short,
    _pad_left: c_short,
    _pad_bottom: c_short,
    _pad_right: c_short,
};

type NCURSES_OUTC = *u8;

type NCURSES_WINDOW_CB = *u8;

type NCURSES_SCREEN_CB = *u8;

/* FIXME: global variable curscr */

/* FIXME: global variable newscr */

/* FIXME: global variable stdscr */

/* FIXME: global variable ttytype */

/* FIXME: global variable COLORS */

/* FIXME: global variable COLOR_PAIRS */

/* FIXME: global variable COLS */

/* FIXME: global variable ESCDELAY */

/* FIXME: global variable LINES */

/* FIXME: global variable TABSIZE */

type MEVENT = {
    id: c_short,
    x: c_int,
    y: c_int,
    z: c_int,
    bstate: mmask_t,
};

const NCURSES_ATTR_SHIFT: c_int = 8;

const A_NORMAL: c_int = 0;
//#define A_ATTRIBUTES	NCURSES_BITS(~(1U - 1U),0)
//#define A_CHARTEXT	(NCURSES_BITS(1U,0) - 1U)
//#define A_COLOR		NCURSES_BITS(((1U) << 8) - 1U,0)
const A_STANDOUT:   c_int = 1 << (NCURSES_ATTR_SHIFT + 8);
const A_UNDERLINE:  c_int = 1 << (NCURSES_ATTR_SHIFT + 9);
const A_REVERSE:    c_int = 1 << (NCURSES_ATTR_SHIFT + 10);
const A_BLINK:      c_int = 1 << (NCURSES_ATTR_SHIFT + 11);
const A_DIM:        c_int = 1 << (NCURSES_ATTR_SHIFT + 12);
const A_BOLD:       c_int = 1 << (NCURSES_ATTR_SHIFT + 13);

const KEY_F0: c_int = 0410;
fn KEY_F(n: c_int) -> c_int {
    ret KEY_F0 + n;
}

#[link_name="ncurses"]
extern mod bindgen {

fn addch(++arg1: chtype) -> c_int;

fn addchnstr(++arg1: *chtype, ++arg2: c_int) -> c_int;

fn addchstr(++arg1: *chtype) -> c_int;

fn addnstr(++arg1: *c_char, ++arg2: c_int) -> c_int;

fn addstr(++arg1: *c_char) -> c_int;

fn attroff(++arg1: c_int) -> c_int;

fn attron(++arg1: c_int) -> c_int;

fn attrset(++arg1: c_int) -> c_int;

fn attr_get(++arg1: *attr_t, ++arg2: *c_short, ++arg3: *c_void) -> c_int;

fn attr_off(++arg1: attr_t, ++arg2: *c_void) -> c_int;

fn attr_on(++arg1: attr_t, ++arg2: *c_void) -> c_int;

fn attr_set(++arg1: attr_t, ++arg2: c_short, ++arg3: *c_void) -> c_int;

fn baudrate() -> c_int;

fn beep() -> c_int;

fn bkgd(++arg1: chtype) -> c_int;

fn bkgdset(++arg1: chtype);

fn border(++arg1: chtype, ++arg2: chtype, ++arg3: chtype, ++arg4: chtype, ++arg5: chtype, ++arg6: chtype, ++arg7: chtype, ++arg8: chtype) -> c_int;

fn box(++arg1: *WINDOW, ++arg2: chtype, ++arg3: chtype) -> c_int;

fn can_change_color() -> bool;

fn cbreak() -> c_int;

fn chgat(++arg1: c_int, ++arg2: attr_t, ++arg3: c_short, ++arg4: *c_void) -> c_int;

fn clear() -> c_int;

fn clearok(++arg1: *WINDOW, ++arg2: bool) -> c_int;

fn clrtobot() -> c_int;

fn clrtoeol() -> c_int;

fn color_content(++arg1: c_short, ++arg2: *c_short, ++arg3: *c_short, ++arg4: *c_short) -> c_int;

fn color_set(++arg1: c_short, ++arg2: *c_void) -> c_int;

fn COLOR_PAIR(++arg1: c_int) -> c_int;

fn copywin(++arg1: *WINDOW, ++arg2: *WINDOW, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int, ++arg6: c_int, ++arg7: c_int, ++arg8: c_int, ++arg9: c_int) -> c_int;

fn curs_set(++arg1: c_int) -> c_int;

fn def_prog_mode() -> c_int;

fn def_shell_mode() -> c_int;

fn delay_output(++arg1: c_int) -> c_int;

fn delch() -> c_int;

fn delscreen(++arg1: *SCREEN);

fn delwin(++arg1: *WINDOW) -> c_int;

fn deleteln() -> c_int;

fn derwin(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int) -> *WINDOW;

fn doupdate() -> c_int;

fn dupwin(++arg1: *WINDOW) -> *WINDOW;

fn echo() -> c_int;

fn echochar(++arg1: chtype) -> c_int;

fn erase() -> c_int;

fn endwin() -> c_int;

fn erasechar() -> c_char;

fn filter();

fn flash() -> c_int;

fn flushinp() -> c_int;

fn getbkgd(++arg1: *WINDOW) -> chtype;

fn getch() -> c_int;

fn getnstr(++arg1: *c_char, ++arg2: c_int) -> c_int;

fn getstr(++arg1: *c_char) -> c_int;

fn getwin(++arg1: *FILE) -> *WINDOW;

fn halfdelay(++arg1: c_int) -> c_int;

fn has_colors() -> bool;

fn has_ic() -> bool;

fn has_il() -> bool;

fn hline(++arg1: chtype, ++arg2: c_int) -> c_int;

fn idcok(++arg1: *WINDOW, ++arg2: bool);

fn idlok(++arg1: *WINDOW, ++arg2: bool) -> c_int;

fn immedok(++arg1: *WINDOW, ++arg2: bool);

fn inch() -> chtype;

fn inchnstr(++arg1: *chtype, ++arg2: c_int) -> c_int;

fn inchstr(++arg1: *chtype) -> c_int;

fn initscr() -> *WINDOW;

fn init_color(++arg1: c_short, ++arg2: c_short, ++arg3: c_short, ++arg4: c_short) -> c_int;

fn init_pair(++arg1: c_short, ++arg2: c_short, ++arg3: c_short) -> c_int;

fn innstr(++arg1: *c_char, ++arg2: c_int) -> c_int;

fn insch(++arg1: chtype) -> c_int;

fn insdelln(++arg1: c_int) -> c_int;

fn insertln() -> c_int;

fn insnstr(++arg1: *c_char, ++arg2: c_int) -> c_int;

fn insstr(++arg1: *c_char) -> c_int;

fn instr(++arg1: *c_char) -> c_int;

fn intrflush(++arg1: *WINDOW, ++arg2: bool) -> c_int;

fn isendwin() -> bool;

fn is_linetouched(++arg1: *WINDOW, ++arg2: c_int) -> bool;

fn is_wintouched(++arg1: *WINDOW) -> bool;

fn keyname(++arg1: c_int) -> *c_char;

fn keypad(++arg1: *WINDOW, ++arg2: bool) -> c_int;

fn killchar() -> c_char;

fn leaveok(++arg1: *WINDOW, ++arg2: bool) -> c_int;

fn longname() -> *c_char;

fn meta(++arg1: *WINDOW, ++arg2: bool) -> c_int;

fn mvaddch(++arg1: c_int, ++arg2: c_int, ++arg3: chtype) -> c_int;

fn mvaddchnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *chtype, ++arg4: c_int) -> c_int;

fn mvaddchstr(++arg1: c_int, ++arg2: c_int, ++arg3: *chtype) -> c_int;

fn mvaddnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_char, ++arg4: c_int) -> c_int;

fn mvaddstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_char) -> c_int;

fn mvchgat(++arg1: c_int, ++arg2: c_int, ++arg3: c_int, ++arg4: attr_t, ++arg5: c_short, ++arg6: *c_void) -> c_int;

fn mvcur(++arg1: c_int, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int) -> c_int;

fn mvdelch(++arg1: c_int, ++arg2: c_int) -> c_int;

fn mvderwin(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;

fn mvgetch(++arg1: c_int, ++arg2: c_int) -> c_int;

fn mvgetnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_char, ++arg4: c_int) -> c_int;

fn mvgetstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_char) -> c_int;

fn mvhline(++arg1: c_int, ++arg2: c_int, ++arg3: chtype, ++arg4: c_int) -> c_int;

fn mvinch(++arg1: c_int, ++arg2: c_int) -> chtype;

fn mvinchnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *chtype, ++arg4: c_int) -> c_int;

fn mvinchstr(++arg1: c_int, ++arg2: c_int, ++arg3: *chtype) -> c_int;

fn mvinnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_char, ++arg4: c_int) -> c_int;

fn mvinsch(++arg1: c_int, ++arg2: c_int, ++arg3: chtype) -> c_int;

fn mvinsnstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_char, ++arg4: c_int) -> c_int;

fn mvinsstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_char) -> c_int;

fn mvinstr(++arg1: c_int, ++arg2: c_int, ++arg3: *c_char) -> c_int;

fn mvprintw(++arg1: c_int, ++arg2: c_int, ++arg3: *c_char/* FIXME: variadic function */) -> c_int;

fn mvscanw(++arg1: c_int, ++arg2: c_int, ++arg3: *c_char/* FIXME: variadic function */) -> c_int;

fn mvvline(++arg1: c_int, ++arg2: c_int, ++arg3: chtype, ++arg4: c_int) -> c_int;

fn mvwaddch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: chtype) -> c_int;

fn mvwaddchnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *chtype, ++arg5: c_int) -> c_int;

fn mvwaddchstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *chtype) -> c_int;

fn mvwaddnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_char, ++arg5: c_int) -> c_int;

fn mvwaddstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_char) -> c_int;

fn mvwchgat(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: attr_t, ++arg6: c_short, ++arg7: *c_void) -> c_int;

fn mvwdelch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;

fn mvwgetch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;

fn mvwgetnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_char, ++arg5: c_int) -> c_int;

fn mvwgetstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_char) -> c_int;

fn mvwhline(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: chtype, ++arg5: c_int) -> c_int;

fn mvwin(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;

fn mvwinch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> chtype;

fn mvwinchnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *chtype, ++arg5: c_int) -> c_int;

fn mvwinchstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *chtype) -> c_int;

fn mvwinnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_char, ++arg5: c_int) -> c_int;

fn mvwinsch(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: chtype) -> c_int;

fn mvwinsnstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_char, ++arg5: c_int) -> c_int;

fn mvwinsstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_char) -> c_int;

fn mvwinstr(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_char) -> c_int;

fn mvwprintw(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_char/* FIXME: variadic function */) -> c_int;

fn mvwscanw(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: *c_char/* FIXME: variadic function */) -> c_int;

fn mvwvline(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: chtype, ++arg5: c_int) -> c_int;

fn napms(++arg1: c_int) -> c_int;

fn newpad(++arg1: c_int, ++arg2: c_int) -> *WINDOW;

fn newterm(++arg1: *c_char, ++arg2: *FILE, ++arg3: *FILE) -> *SCREEN;

fn newwin(++arg1: c_int, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int) -> *WINDOW;

fn nl() -> c_int;

fn nocbreak() -> c_int;

fn nodelay(++arg1: *WINDOW, ++arg2: bool) -> c_int;

fn noecho() -> c_int;

fn nonl() -> c_int;

fn noqiflush();

fn noraw() -> c_int;

fn notimeout(++arg1: *WINDOW, ++arg2: bool) -> c_int;

fn overlay(++arg1: *WINDOW, ++arg2: *WINDOW) -> c_int;

fn overwrite(++arg1: *WINDOW, ++arg2: *WINDOW) -> c_int;

fn pair_content(++arg1: c_short, ++arg2: *c_short, ++arg3: *c_short) -> c_int;

fn PAIR_NUMBER(++arg1: c_int) -> c_int;

fn pechochar(++arg1: *WINDOW, ++arg2: chtype) -> c_int;

fn pnoutrefresh(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int, ++arg6: c_int, ++arg7: c_int) -> c_int;

fn prefresh(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int, ++arg6: c_int, ++arg7: c_int) -> c_int;

fn printw(++arg1: *c_char/* FIXME: variadic function */) -> c_int;

fn putwin(++arg1: *WINDOW, ++arg2: *FILE) -> c_int;

fn qiflush();

fn raw() -> c_int;

fn redrawwin(++arg1: *WINDOW) -> c_int;

fn refresh() -> c_int;

fn resetty() -> c_int;

fn reset_prog_mode() -> c_int;

fn reset_shell_mode() -> c_int;

fn ripoffline(++arg1: c_int, ++arg2: *u8) -> c_int;

fn savetty() -> c_int;

fn scanw(++arg1: *c_char/* FIXME: variadic function */) -> c_int;

fn scr_dump(++arg1: *c_char) -> c_int;

fn scr_init(++arg1: *c_char) -> c_int;

fn scrl(++arg1: c_int) -> c_int;

fn scroll(++arg1: *WINDOW) -> c_int;

fn scrollok(++arg1: *WINDOW, ++arg2: bool) -> c_int;

fn scr_restore(++arg1: *c_char) -> c_int;

fn scr_set(++arg1: *c_char) -> c_int;

fn setscrreg(++arg1: c_int, ++arg2: c_int) -> c_int;

fn set_term(++arg1: *SCREEN) -> *SCREEN;

fn slk_attroff(++arg1: chtype) -> c_int;

fn slk_attr_off(++arg1: attr_t, ++arg2: *c_void) -> c_int;

fn slk_attron(++arg1: chtype) -> c_int;

fn slk_attr_on(++arg1: attr_t, ++arg2: *c_void) -> c_int;

fn slk_attrset(++arg1: chtype) -> c_int;

fn slk_attr() -> attr_t;

fn slk_attr_set(++arg1: attr_t, ++arg2: c_short, ++arg3: *c_void) -> c_int;

fn slk_clear() -> c_int;

fn slk_color(++arg1: c_short) -> c_int;

fn slk_init(++arg1: c_int) -> c_int;

fn slk_label(++arg1: c_int) -> *c_char;

fn slk_noutrefresh() -> c_int;

fn slk_refresh() -> c_int;

fn slk_restore() -> c_int;

fn slk_set(++arg1: c_int, ++arg2: *c_char, ++arg3: c_int) -> c_int;

fn slk_touch() -> c_int;

fn standout() -> c_int;

fn standend() -> c_int;

fn start_color() -> c_int;

fn subpad(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int) -> *WINDOW;

fn subwin(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int, ++arg5: c_int) -> *WINDOW;

fn syncok(++arg1: *WINDOW, ++arg2: bool) -> c_int;

fn termattrs() -> chtype;

fn termname() -> *c_char;

fn timeout(++arg1: c_int);

fn touchline(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;

fn touchwin(++arg1: *WINDOW) -> c_int;

fn typeahead(++arg1: c_int) -> c_int;

fn ungetch(++arg1: c_int) -> c_int;

fn untouchwin(++arg1: *WINDOW) -> c_int;

fn use_env(++arg1: bool);

fn vidattr(++arg1: chtype) -> c_int;

fn vidputs(++arg1: chtype, ++arg2: NCURSES_OUTC) -> c_int;

fn vline(++arg1: chtype, ++arg2: c_int) -> c_int;

// FIXME fn vwprintw(++arg1: *WINDOW, ++arg2: *c_char, ++arg3: *__va_list_tag) -> c_int;

// FIXME fn vw_printw(++arg1: *WINDOW, ++arg2: *c_char, ++arg3: *__va_list_tag) -> c_int;

// FIXME fn vwscanw(++arg1: *WINDOW, ++arg2: *c_char, ++arg3: *__va_list_tag) -> c_int;

// FIXME fn vw_scanw(++arg1: *WINDOW, ++arg2: *c_char, ++arg3: *__va_list_tag) -> c_int;

fn waddch(++arg1: *WINDOW, ++arg2: chtype) -> c_int;

fn waddchnstr(++arg1: *WINDOW, ++arg2: *chtype, ++arg3: c_int) -> c_int;

fn waddchstr(++arg1: *WINDOW, ++arg2: *chtype) -> c_int;

fn waddnstr(++arg1: *WINDOW, ++arg2: *c_char, ++arg3: c_int) -> c_int;

fn waddstr(++arg1: *WINDOW, ++arg2: *c_char) -> c_int;

fn wattron(++arg1: *WINDOW, ++arg2: c_int) -> c_int;

fn wattroff(++arg1: *WINDOW, ++arg2: c_int) -> c_int;

fn wattrset(++arg1: *WINDOW, ++arg2: c_int) -> c_int;

fn wattr_get(++arg1: *WINDOW, ++arg2: *attr_t, ++arg3: *c_short, ++arg4: *c_void) -> c_int;

fn wattr_on(++arg1: *WINDOW, ++arg2: attr_t, ++arg3: *c_void) -> c_int;

fn wattr_off(++arg1: *WINDOW, ++arg2: attr_t, ++arg3: *c_void) -> c_int;

fn wattr_set(++arg1: *WINDOW, ++arg2: attr_t, ++arg3: c_short, ++arg4: *c_void) -> c_int;

fn wbkgd(++arg1: *WINDOW, ++arg2: chtype) -> c_int;

fn wbkgdset(++arg1: *WINDOW, ++arg2: chtype);

fn wborder(++arg1: *WINDOW, ++arg2: chtype, ++arg3: chtype, ++arg4: chtype, ++arg5: chtype, ++arg6: chtype, ++arg7: chtype, ++arg8: chtype, ++arg9: chtype) -> c_int;

fn wchgat(++arg1: *WINDOW, ++arg2: c_int, ++arg3: attr_t, ++arg4: c_short, ++arg5: *c_void) -> c_int;

fn wclear(++arg1: *WINDOW) -> c_int;

fn wclrtobot(++arg1: *WINDOW) -> c_int;

fn wclrtoeol(++arg1: *WINDOW) -> c_int;

fn wcolor_set(++arg1: *WINDOW, ++arg2: c_short, ++arg3: *c_void) -> c_int;

fn wcursyncup(++arg1: *WINDOW);

fn wdelch(++arg1: *WINDOW) -> c_int;

fn wdeleteln(++arg1: *WINDOW) -> c_int;

fn wechochar(++arg1: *WINDOW, ++arg2: chtype) -> c_int;

fn werase(++arg1: *WINDOW) -> c_int;

fn wgetch(++arg1: *WINDOW) -> c_int;

fn wgetnstr(++arg1: *WINDOW, ++arg2: *c_char, ++arg3: c_int) -> c_int;

fn wgetstr(++arg1: *WINDOW, ++arg2: *c_char) -> c_int;

fn whline(++arg1: *WINDOW, ++arg2: chtype, ++arg3: c_int) -> c_int;

fn winch(++arg1: *WINDOW) -> chtype;

fn winchnstr(++arg1: *WINDOW, ++arg2: *chtype, ++arg3: c_int) -> c_int;

fn winchstr(++arg1: *WINDOW, ++arg2: *chtype) -> c_int;

fn winnstr(++arg1: *WINDOW, ++arg2: *c_char, ++arg3: c_int) -> c_int;

fn winsch(++arg1: *WINDOW, ++arg2: chtype) -> c_int;

fn winsdelln(++arg1: *WINDOW, ++arg2: c_int) -> c_int;

fn winsertln(++arg1: *WINDOW) -> c_int;

fn winsnstr(++arg1: *WINDOW, ++arg2: *c_char, ++arg3: c_int) -> c_int;

fn winsstr(++arg1: *WINDOW, ++arg2: *c_char) -> c_int;

fn winstr(++arg1: *WINDOW, ++arg2: *c_char) -> c_int;

fn wmove(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;

fn wnoutrefresh(++arg1: *WINDOW) -> c_int;

fn wprintw(++arg1: *WINDOW, ++arg2: *c_char/* FIXME: variadic function */) -> c_int;

fn wredrawln(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;

fn wrefresh(++arg1: *WINDOW) -> c_int;

fn wscanw(++arg1: *WINDOW, ++arg2: *c_char/* FIXME: variadic function */) -> c_int;

fn wscrl(++arg1: *WINDOW, ++arg2: c_int) -> c_int;

fn wsetscrreg(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;

fn wstandout(++arg1: *WINDOW) -> c_int;

fn wstandend(++arg1: *WINDOW) -> c_int;

fn wsyncdown(++arg1: *WINDOW);

fn wsyncup(++arg1: *WINDOW);

fn wtimeout(++arg1: *WINDOW, ++arg2: c_int);

fn wtouchln(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int, ++arg4: c_int) -> c_int;

fn wvline(++arg1: *WINDOW, ++arg2: chtype, ++arg3: c_int) -> c_int;

fn tigetflag(++arg1: *c_char) -> c_int;

fn tigetnum(++arg1: *c_char) -> c_int;

fn tigetstr(++arg1: *c_char) -> *c_char;

fn putp(++arg1: *c_char) -> c_int;

fn tparm(++arg1: *c_char/* FIXME: variadic function */) -> *c_char;

fn tiparm(++arg1: *c_char/* FIXME: variadic function */) -> *c_char;

fn getattrs(++arg1: *WINDOW) -> c_int;

fn getcurx(++arg1: *WINDOW) -> c_int;

fn getcury(++arg1: *WINDOW) -> c_int;

fn getbegx(++arg1: *WINDOW) -> c_int;

fn getbegy(++arg1: *WINDOW) -> c_int;

fn getmaxx(++arg1: *WINDOW) -> c_int;

fn getmaxy(++arg1: *WINDOW) -> c_int;

fn getparx(++arg1: *WINDOW) -> c_int;

fn getpary(++arg1: *WINDOW) -> c_int;

fn is_term_resized(++arg1: c_int, ++arg2: c_int) -> bool;

fn keybound(++arg1: c_int, ++arg2: c_int) -> *c_char;

fn curses_version() -> *c_char;

fn assume_default_colors(++arg1: c_int, ++arg2: c_int) -> c_int;

fn define_key(++arg1: *c_char, ++arg2: c_int) -> c_int;

fn get_escdelay() -> c_int;

fn key_defined(++arg1: *c_char) -> c_int;

fn keyok(++arg1: c_int, ++arg2: bool) -> c_int;

fn resize_term(++arg1: c_int, ++arg2: c_int) -> c_int;

fn resizeterm(++arg1: c_int, ++arg2: c_int) -> c_int;

fn set_escdelay(++arg1: c_int) -> c_int;

fn set_tabsize(++arg1: c_int) -> c_int;

fn use_default_colors() -> c_int;

fn use_extended_names(++arg1: bool) -> c_int;

fn use_legacy_coding(++arg1: c_int) -> c_int;

fn use_screen(++arg1: *SCREEN, ++arg2: NCURSES_SCREEN_CB, ++arg3: *c_void) -> c_int;

fn use_window(++arg1: *WINDOW, ++arg2: NCURSES_WINDOW_CB, ++arg3: *c_void) -> c_int;

fn wresize(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> c_int;

fn nofilter();

fn wgetparent(++arg1: *WINDOW) -> *WINDOW;

fn is_cleared(++arg1: *WINDOW) -> bool;

fn is_idcok(++arg1: *WINDOW) -> bool;

fn is_idlok(++arg1: *WINDOW) -> bool;

fn is_immedok(++arg1: *WINDOW) -> bool;

fn is_keypad(++arg1: *WINDOW) -> bool;

fn is_leaveok(++arg1: *WINDOW) -> bool;

fn is_nodelay(++arg1: *WINDOW) -> bool;

fn is_notimeout(++arg1: *WINDOW) -> bool;

fn is_pad(++arg1: *WINDOW) -> bool;

fn is_scrollok(++arg1: *WINDOW) -> bool;

fn is_subwin(++arg1: *WINDOW) -> bool;

fn is_syncok(++arg1: *WINDOW) -> bool;

fn wgetscrreg(++arg1: *WINDOW, ++arg2: *c_int, ++arg3: *c_int) -> c_int;

fn has_mouse() -> bool;

fn getmouse(++arg1: *MEVENT) -> c_int;

fn ungetmouse(++arg1: *MEVENT) -> c_int;

fn mousemask(++arg1: mmask_t, ++arg2: *mmask_t) -> mmask_t;

fn wenclose(++arg1: *WINDOW, ++arg2: c_int, ++arg3: c_int) -> bool;

fn mouseinterval(++arg1: c_int) -> c_int;

fn wmouse_trafo(++arg1: *WINDOW, ++arg2: *c_int, ++arg3: *c_int, ++arg4: bool) -> bool;

fn mouse_trafo(++arg1: *c_int, ++arg2: *c_int, ++arg3: bool) -> bool;

fn mcprint(++arg1: *c_char, ++arg2: c_int) -> c_int;

fn has_key(++arg1: c_int) -> c_int;

// TODO these are all debug functions and only exist if you have libncurses_g; i don't know how to handle that.
/*
fn _move(++arg1: c_int, ++arg2: c_int) -> c_int;

fn _tracef(++arg1: *c_char/* FIXME: variadic function */);

fn _tracedump(++arg1: *c_char, ++arg2: *WINDOW);

fn _traceattr(++arg1: attr_t) -> *c_char;

fn _traceattr2(++arg1: c_int, ++arg2: chtype) -> *c_char;

fn _nc_tracebits() -> *c_char;

fn _tracechar(++arg1: c_int) -> *c_char;

fn _tracechtype(++arg1: chtype) -> *c_char;

fn _tracechtype2(++arg1: c_int, ++arg2: chtype) -> *c_char;

fn _tracemouse(++arg1: *MEVENT) -> *c_char;

fn trace(++arg1: c_uint);
*/

}
